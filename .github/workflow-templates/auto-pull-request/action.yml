name: auto-pull-request
description: Automatically creates and merges pull requests with automerge label

inputs:
  branch:
    description: "Designated branch name"
    required: true
  gh_token:
    description: "GitHub token"
    required: true
  slack_channel:
    description: "Slack channel ID for updates"
    required: true
  slack_token:
    description: "Secret slack token"
    required: true
  pr_base_url:
    description: "Pull request base url"
    required: true

runs:
  using: "composite"
  steps:
    - name: Ensure automerge label exists
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
      run: |
        gh label create automerge \
          --description "Default label for automerge action" \
          --color 0000FF \
          --force

    - name: Check if PR exists
      id: check_pr
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
      run: |
        # List open pull requests targeting designated branch
        PR_EXISTS=$(gh pr list \
          --state open \
          --base "${{ inputs.branch }}" \
          --head main \
          --json number \
          --jq '.[].number')
        # Capture PR number if PR exists
        echo "PR_EXISTS=$PR_EXISTS" >> $GITHUB_ENV

    - name: Raise Pull Request
      id: create-pr
      if: env.PR_EXISTS == ''
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
      run: |
        # Create pull request from main into designated branch with label automerge
        PR=$(gh pr create \
          --title "Auto-sync ${{ inputs.branch }} branch from main" \
          --body "Auto-generated by GitHub Actions" \
          --base "${{ inputs.branch }}" \
          --label automerge \
          --head main)
        # Capture PR number
        echo "PR=$PR" >> $GITHUB_ENV
        echo "PR_NUMBER=$(basename "$PR")" >> $GITHUB_ENV

    - name: Attempt auto-merge
      id: automerge
      uses: "pascalgn/automerge-action@v0.16.2"
      env:
        GITHUB_TOKEN: "${{ inputs.gh_token }}"
        PULL_REQUEST: ${{ env.PR_EXISTS || env.PR_NUMBER }}
        MERGE_METHOD: squash

    # - name: Auto-close failed PR
    #   id: autoclose
    #   if: steps.automerge.outputs.mergeResult != 'merged'
    #   shell: bash
    #   env:
    #     GH_TOKEN: ${{ inputs.gh_token }}
    #   run: |
    #     gh pr close ${{ env.PR_NUMBER }}

    # - name: Notify merge failure
    #   id: slack_failure
    #   if: steps.automerge.outputs.mergeResult != 'merged'
    #   uses: slackapi/slack-github-action@v1.24.0
    #   with:
    #     channel-id: ${{ inputs.slack_channel }}
    #     payload: |
    #       {
    #         "text": "*Pull request #${{ steps.automerge.outputs.pullRequestNumber }} not merged and closed*",
    #         "attachments": [
    #           {
    #             "color": "FF0000",
    #             "fields": [
    #               {
    #                 "value": ":this_is_fine: *Action required*: unable to auto-merge `main` into `${{ inputs.branch }}`. \nPull request: ${{ inputs.pr_base_url }}/${{ steps.automerge.outputs.pullRequestNumber }}",
    #                 "short": false
    #               }
    #             ]
    #           }
    #         ]
    #       }
    #   env:
    #     SLACK_BOT_TOKEN: ${{ inputs.slack_token }}

    # - name: Notify merge success
    #   id: slack_success
    #   if: steps.automerge.outputs.mergeResult == 'merged'
    #   uses: slackapi/slack-github-action@v1.24.0
    #   with:
    #     channel-id: ${{ inputs.slack_channel }}
    #     payload: |
    #       {
    #         "text": "*Pull request #${{ steps.automerge.outputs.pullRequestNumber }} merged*",
    #         "attachments": [
    #           {
    #             "color": "008000",
    #             "fields": [
    #               {
    #                 "value": ":white_check_mark: Successfully auto-merged branch `main` into `${{ inputs.branch }}`. \nPull request: ${{ inputs.pr_base_url }}/${{ steps.automerge.outputs.pullRequestNumber }}",
    #                 "short": false
    #               }
    #             ]
    #           }
    #         ]
    #       }
    #   env:
    #     SLACK_BOT_TOKEN: ${{ inputs.slack_token }}

    - name: Fail workflow
      shell: bash
      if: steps.automerge.outputs.mergeResult != 'merged'
      run: |
        echo "Pull request ${{ steps.automerge.outputs.pullRequestNumber }} not merged."
        echo "Merge result: ${{ steps.automerge.outputs.mergeResult }}. Action failed."
        exit 1
